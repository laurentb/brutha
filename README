======
brutha
======

Description
-----------

*brutha* is an answer to the utter failure of sound conversion tools.

It will flawlessly transcode lossless files or copy lossy files,
to a provided directory, with a "synchronization" behavior.

By carefully keeping the files' timestamps, it also allows that destination
to be easily rsynced elsewhere, and thus avoid any useless transfers.

Due to the usage of formats with Ogg containers, no tags are lost in the process of converting FLAC to Ogg Vorbis.

Since transcoding requires a lot of CPU time, it is useful to run
as many jobs as possible in parallel. `brutha` will try to make use of
powerful, time-tested tools (either `GNU make`, `GNU parallel`,
or similar implementations) to do so.
It's not perfect but good enough while keeping it simple.


To our knowledge, no other solution can fully:

* avoid encoding again files that were already processed at an earlier run
* convert only lossless files (no lossy to lossy)
* keep the directory structure
* handle a huge number of files
* handle parallel job execution (and not crash)
* use the proper Ogg Vorbis settings (setting quality and not average bitrate)
* guarantee usage of the highest resampling algorithms
* not be an annoying GUI

To sum up, `brutha` is a music converter tailored to audiophiles,
who want to convert their huge collections to more portable destinations,
with the highest quality/size ratio in mind.

`brutha` is very simple and rests on the shoulders on giants:
FLAC, Ogg Vorbis, sox, Python, GNU Make, GNU Parallel, Bash, etc.


Requirements
------------

The first one is space. Since you can store locally all the source files, we suppose you
also can store the smaller destination files locally. Alternatively,
you will be able to sync to a portable player, a remote filesystem (NFS, sshfs, etc.)
without issues except lower performance.

Software requirements
~~~~~~~~~~~~~~~~~~~~~

* Python 2 or Python 3 (with 2to3 or setup.py), Python 2 being the main version for now
* python-argparse (or Python >2.7 / >3.1)
* `python-mutagen <http://pypi.python.org/pypi/mutagen>`_
* `sox <http://sox.sourceforge.net/>`_
* for parallel runs, either `GNU make <http://www.gnu.org/software/make/make.html>`_
  or `GNU parallel <http://www.gnu.org/software/parallel/>`_, or a similar implementation


Usage
-----

::

    brutha [options] SOURCE DESTINATION

``brutha -h`` provides help for all available options.

You can run ``python -m brutha`` to use it without installing.

Default values
~~~~~~~~~~~~~~
`brutha` tries to detect how many cores you have
(run ``brutha -h`` to check the default for ``-j``).
It also tries to use a parallel method
(``make`` or ``parallel`` instead of ``sh``) if available.

By default, it does not run or delete anything; when you are experienced
with its usage, you will likely call it with ``-x`` (execute) and ``-d`` (delete).

Examples
~~~~~~~~

A typical use would be::

    brutha -d -x -q6 -R44100 -B16 ~/Music /mnt/portable_music_player/Music

This downsamples music to 16/44 as most portable players don't handle
24/96 well (-R44100 -B16), encodes FLAC to Ogg at a reasonable quality (-q6),
deletes old unwanted files (-d), and executes the commands right away (-x).


Future
------

`brutha` is considered feature-complete.

This might be interesting for some users, but is not planned:

* Support other formats (currently only FLAC to Ogg Vorbis, with Ogg Vorbis and MP3 as exact copies).
* Make mutagen optional (only required for frequency / bit depth checks).

Contributions are welcome, though.
